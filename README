This is a DEMO BRANCH.
To run locally:
1.	Copy 'env.example' -> .env
2.	Fill in your own Discord token, Google Sheets credentials, etc
3.	'pip install -r requirements.txt && python bot.py'
DinoRateBot
Lets your Discord community rate dinosaurs via persistent dropdowns and see auto-updating results. The bot survives restarts/redeploys and revives threads that have been auto-archived by Discord. Stores message/thread IDs in a Google Sheets and reviving posts on startup.
Commands:
⦁	/rate : posts an embed with three dropdowns (Complexity, Sociability, Survivability)
⦁	/results : posts a results embed (global or per-dino) and updates it on a schedule.
Persistence:
⦁	Each dropdown has a stable dino_id
⦁	Metadata tab in Sheets stores Thread ID, rate_message_id, and results_message_id
⦁	on-ready fetches messages by ID and patches components in place
Architecture:
⦁	Discord.py (slash commands, Views, background tasks)
⦁	Google Sheets
⦁	Votes - raw user ratings
⦁	Compiled - Aggregated scores (read-only for the bot)
⦁	Metadata - durable state: Thread ID, dino_id, rate_message_id, results_message_id
⦁	Startup Revival:
⦁	Load Metadata safely, log which dino_ids were loaded
⦁	Unarchive/unlock threads if needed
⦁	Fetch messages and attach persistent views; seed results updater
⦁	Updater Loop:
⦁	Regenerates embeds on a 45 minute cadence
⦁	Uses TTL caching for Sheets reads and backoff on errors
Setup:
⦁	Create a Google Sheet with tabs: Votes, Compiled, and Metadata
⦁	Metadata headers: "Thread ID", "dino_id", "rate_message_id", "results_message_id"
Environment:
DISCORD_TOKEN=...
GUILD_ID=...
SHEET_NAME=...
provide Google service account credentials.json with access to the sheet
Bot Perms:
⦁	View Channel, Read Message History
⦁	Send Messages, Send Messages in Threads
⦁	Manage Threads (to unarchive/unlock)
Key Implementation Details:
⦁	Persistent UL
⦁	Legacy posts are patched via msg.edit(view=RateView(..)) so their components become persistant
⦁	Safe metadata load
⦁	Skip rows with missing Thread ID or dino_id
⦁	Print a single summary: "Loaded metadata for X dinos: ...."
⦁	Revival:
⦁	For each dino_id, Fetch channel by Thread ID: unarchive/unlock if archived
⦁	Fetch rate_message_id and results_message_id, attach views and seed updater
⦁	Track failures per dino_id with clear logs
⦁	Sheets Resilience:
⦁	Cache compiled reads with a TTL to avoid quota spikes
⦁	Retry and exponential backoff on 429/5xx
⦁	Optional upsert: when posting new /rate and /results, write back IDs to keep Metadata current.

License:
MIT - Fork, adapt, and have fun. If you improve the revival flow or add a DB backend, I'd love a PR or a note.
